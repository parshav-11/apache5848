import piplite
await piplite.install(['nbformat', 'plotly'])

# Import required libraries
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# Read the airline data into pandas dataframe
from js import fetch
import io
URL = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/airline_data.csv'
resp = await fetch(URL)
text = io.BytesIO((await resp.arrayBuffer()).to_py())
airline_data =  pd.read_csv(text,
                            encoding = "ISO-8859-1",
                            dtype={'Div1Airport': str, 'Div1TailNum': str, 
                                   'Div2Airport': str, 'Div2TailNum': str})
print('Data downloaded and read into a dataframe!')

# Preview the first 5 lines of the loaded data 
airline_data.head()

# Shape of the data
airline_data.shape

# Randomly sample 500 data points. Setting the random state to be 42 so that we get same result.
data = airline_data.sample(n=500, random_state=42)

#plotly.graph_objects
#1. Scatter Plot
#Idea: How departure time changes with respect to airport distance
# First we create a figure using go.Figure and adding trace to it through go.scatter
fig = go.Figure(data=go.Scatter(x=data['Distance'], y=data['DepTime'], mode='markers', marker=dict(color='red')))
# Updating layout through `update_layout`. Here we are adding title to the plot and providing title to x and y axis.
fig.update_layout(title='Distance vs Departure Time', xaxis_title='Distance', yaxis_title='DepTime')
# Display the figure
fig.show()

#2. Line Plot
#Idea: Extract average monthly arrival delay time and see how it changes over the year.
# Group the data by Month and compute average over arrival delay time.
line_data = data.groupby('Month')['ArrDelay'].mean().reset_index()

#plotly.express
#1. Bar Chart
#Idea: Extract number of flights from a specific airline that goes to a destination
# Group the data by destination state and reporting airline. Compute total number of flights in each combination
bar_data = data.groupby(['DestState'])['Flights'].sum().reset_index()

# Use plotly express bar chart function px.bar. Provide input data, x and y axis variable, and title of the chart.
# This will give total number of flights to the destination state.
fig = px.bar(bar_data, x="DestState", y="Flights", title='Total number of flights to the destination state split by reporting airline') 
fig.show()

#2. Bubble Chart
#Idea: Get number of flights as per reporting airline
# Group the data by reporting airline and get number of flights
bub_data = data.groupby('Reporting_Airline')['Flights'].sum().reset_index()
# Create bubble chart here
fig = px.scatter(bub_data, x="Reporting_Airline", y="Flights", size="Flights", hover_name="Reporting_Airline", title='Reporting Airline vs Number of Flights', size_max=60)
fig.show()

#Histogram
#Idea: Get distribution of arrival delay
# Set missing values to 0
data['ArrDelay'] = data['ArrDelay'].fillna(0)
# Create histogram here
fig = px.histogram(data, x="ArrDelay")
fig.show()

#3.Pie chart
#Idea: Proportion of distance group by month (month indicated by numbers)
# Use px.pie function to create the chart. Input dataset. 
# Values parameter will set values associated to the sector. 'Month' feature is passed to it.
# labels for the sector are passed to the `names` parameter.
fig = px.pie(data, values='Month', names='DistanceGroup', title='Distance group proportion by month')
fig.show()

#Sunburst plot
fig = px.sunburst(data, path=['Month','[DestStateName'], values = 'Flight')
fig.show()
